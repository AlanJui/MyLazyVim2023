return {
  {
    "mfussenegger/nvim-dap-python",
    keys = {
      {
        "<leader>dPt",
        function()
          require("dap-python").test_method()
        end,
        desc = "Debug Method",
        ft = "python",
      },
      {
        "<leader>dPc",
        function()
          require("dap-python").test_class()
        end,
        desc = "Debug Class",
        ft = "python",
      },
    },
    config = function(_, opts)
      local dap = require("dap")

      -- configure DAP Adapter
      local debugpy_path = require("mason-registry").get_package("debugpy"):get_install_path()
      require("dap-python").setup(debugpy_path .. "/venv/bin/python")

      -- configure configurations of dap Adapter
      local dap_configurations = {
        {
          type = "python",
          request = "launch",
          name = "My Launch file",
          program = "${file}",
        },
        {
          type = "python",
          request = "launch",
          name = "My Launch Django Server",
          cwd = "${workspaceFolder}",
          program = "${workspaceFolder}/manage.py",
          args = {
            "runserver",
            "--noreload",
          },
          django = true,
          console = "integratedTerminal",
          justMyCode = true,
        },
        {
          type = "python",
          request = "launch",
          name = "My Python: Django Debug Single Test",
          program = "${workspaceFolder}/manage.py",
          args = {
            "test",
            "${relativeFileDirname}",
          },
          django = true,
          console = "integratedTerminal",
        },
      }
      for _, config in ipairs(dap_configurations) do
        table.insert(dap.configurations.python, config)
      end
    end,
  },
}
